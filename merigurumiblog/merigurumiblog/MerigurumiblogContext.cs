// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace merigurumiblog
{
    public partial class MerigurumiblogContext : DbContext
    {
        public MerigurumiblogContext()
        {
        }

        public MerigurumiblogContext(DbContextOptions<MerigurumiblogContext> options)
            : base(options)
        {
        }

        public virtual DbSet<author> author { get; set; }
        public virtual DbSet<authorfollow> authorfollow { get; set; }
        public virtual DbSet<category> category { get; set; }
        public virtual DbSet<comment> comment { get; set; }
        public virtual DbSet<picture> picture { get; set; }
        public virtual DbSet<post> post { get; set; }
        public virtual DbSet<posttag> posttag { get; set; }
        public virtual DbSet<tag> tag { get; set; }
        public virtual DbSet<user> user { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<authorfollow>(entity =>
            {
                entity.HasKey(e => new { e.authorid, e.userid });

                entity.HasOne(d => d.author)
                    .WithMany(p => p.authorfollow)
                    .HasForeignKey(d => d.authorid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_authorfollow_author");

                entity.HasOne(d => d.user)
                    .WithMany(p => p.authorfollow)
                    .HasForeignKey(d => d.userid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_authorfollow_user");
            });

            modelBuilder.Entity<comment>(entity =>
            {
                entity.HasOne(d => d.post)
                    .WithMany(p => p.comment)
                    .HasForeignKey(d => d.postid)
                    .HasConstraintName("FK_comment_post");
            });

            modelBuilder.Entity<picture>(entity =>
            {
                entity.HasOne(d => d.post)
                    .WithMany(p => p.picture)
                    .HasForeignKey(d => d.postid)
                    .HasConstraintName("FK_picture_post");
            });

            modelBuilder.Entity<post>(entity =>
            {
                entity.Property(e => e.postdate).HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.author)
                    .WithMany(p => p.post)
                    .HasForeignKey(d => d.authorid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_post_author");

                entity.HasOne(d => d.category)
                    .WithMany(p => p.post)
                    .HasForeignKey(d => d.categoryid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_post_category");
            });

            modelBuilder.Entity<posttag>(entity =>
            {
                entity.HasKey(e => new { e.postid, e.tagid });

                entity.HasOne(d => d.post)
                    .WithMany(p => p.posttag)
                    .HasForeignKey(d => d.postid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_posttag_post");

                entity.HasOne(d => d.tag)
                    .WithMany(p => p.posttag)
                    .HasForeignKey(d => d.tagid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_posttag_tag");
            });

            modelBuilder.Entity<user>(entity =>
            {
                entity.Property(e => e.registeringdate).HasDefaultValueSql("(getdate())");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}