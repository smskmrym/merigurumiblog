// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace merigurumiblog
{
    public partial class MerigurumiblogContext : DbContext
    {
        public MerigurumiblogContext()
        {
        }

        public MerigurumiblogContext(DbContextOptions<MerigurumiblogContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Author> Author { get; set; }
        public virtual DbSet<Authorfollow> Authorfollow { get; set; }
        public virtual DbSet<Category> Category { get; set; }
        public virtual DbSet<Comment> Comment { get; set; }
        public virtual DbSet<Picture> Picture { get; set; }
        public virtual DbSet<Post> Post { get; set; }
        public virtual DbSet<Posttag> Posttag { get; set; }
        public virtual DbSet<Tag> Tag { get; set; }
        public virtual DbSet<User> User { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Author>(entity =>
            {
                entity.ToTable("author");

                entity.Property(e => e.Authorid).HasColumnName("authorid");

                entity.Property(e => e.Display).HasColumnName("display");

                entity.Property(e => e.Gender).HasColumnName("gender");

                entity.Property(e => e.Lastname)
                    .IsRequired()
                    .HasColumnName("lastname")
                    .HasMaxLength(50);

                entity.Property(e => e.Mailadress)
                    .HasColumnName("mailadress")
                    .HasMaxLength(50);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("name")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Authorfollow>(entity =>
            {
                entity.HasKey(e => new { e.Authorid, e.Userid });

                entity.ToTable("authorfollow");

                entity.Property(e => e.Authorid).HasColumnName("authorid");

                entity.Property(e => e.Userid).HasColumnName("userid");

                entity.HasOne(d => d.Author)
                    .WithMany(p => p.Authorfollow)
                    .HasForeignKey(d => d.Authorid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_authorfollow_author");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.Authorfollow)
                    .HasForeignKey(d => d.Userid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_authorfollow_user");
            });

            modelBuilder.Entity<Category>(entity =>
            {
                entity.ToTable("category");

                entity.Property(e => e.Categoryid).HasColumnName("categoryid");

                entity.Property(e => e.Display)
                    .HasColumnName("display")
                    .HasMaxLength(500);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("name")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Comment>(entity =>
            {
                entity.ToTable("comment");

                entity.Property(e => e.Commentid).HasColumnName("commentid");

                entity.Property(e => e.Comment1)
                    .HasColumnName("comment")
                    .HasMaxLength(1500);

                entity.Property(e => e.Dateadded)
                    .HasColumnName("dateadded")
                    .HasColumnType("datetime");

                entity.Property(e => e.Likes).HasColumnName("likes");

                entity.Property(e => e.Namelastname)
                    .HasColumnName("namelastname")
                    .HasMaxLength(150);

                entity.Property(e => e.Postid).HasColumnName("postid");

                entity.HasOne(d => d.Post)
                    .WithMany(p => p.Comment)
                    .HasForeignKey(d => d.Postid)
                    .HasConstraintName("FK_comment_post");
            });

            modelBuilder.Entity<Picture>(entity =>
            {
                entity.ToTable("picture");

                entity.Property(e => e.Pictureid).HasColumnName("pictureid");

                entity.Property(e => e.Bigsize)
                    .HasColumnName("bigsize")
                    .HasMaxLength(250);

                entity.Property(e => e.Middlesize)
                    .HasColumnName("middlesize")
                    .HasMaxLength(250);

                entity.Property(e => e.Postid).HasColumnName("postid");

                entity.Property(e => e.Smallsize)
                    .HasColumnName("smallsize")
                    .HasMaxLength(250);

                entity.Property(e => e.Video)
                    .HasColumnName("video")
                    .HasMaxLength(250);

                entity.HasOne(d => d.Post)
                    .WithMany(p => p.Picture)
                    .HasForeignKey(d => d.Postid)
                    .HasConstraintName("FK_picture_post");
            });

            modelBuilder.Entity<Post>(entity =>
            {
                entity.ToTable("post");

                entity.Property(e => e.Postid).HasColumnName("postid");

                entity.Property(e => e.Authorid).HasColumnName("authorid");

                entity.Property(e => e.Categoryid).HasColumnName("categoryid");

                entity.Property(e => e.Display).HasColumnName("display");

                entity.Property(e => e.Likes).HasColumnName("likes");

                entity.Property(e => e.Postcontent)
                    .IsRequired()
                    .HasColumnName("postcontent");

                entity.Property(e => e.Postdate)
                    .HasColumnName("postdate")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Postname)
                    .IsRequired()
                    .HasColumnName("postname")
                    .HasMaxLength(100);

                entity.HasOne(d => d.Author)
                    .WithMany(p => p.Post)
                    .HasForeignKey(d => d.Authorid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_post_author");

                entity.HasOne(d => d.Category)
                    .WithMany(p => p.Post)
                    .HasForeignKey(d => d.Categoryid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_post_category");
            });

            modelBuilder.Entity<Posttag>(entity =>
            {
                entity.HasKey(e => new { e.Postid, e.Tagid });

                entity.ToTable("posttag");

                entity.Property(e => e.Postid).HasColumnName("postid");

                entity.Property(e => e.Tagid).HasColumnName("tagid");

                entity.HasOne(d => d.Post)
                    .WithMany(p => p.Posttag)
                    .HasForeignKey(d => d.Postid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_posttag_post");

                entity.HasOne(d => d.Tag)
                    .WithMany(p => p.Posttag)
                    .HasForeignKey(d => d.Tagid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_posttag_tag");
            });

            modelBuilder.Entity<Tag>(entity =>
            {
                entity.ToTable("tag");

                entity.Property(e => e.Tagid).HasColumnName("tagid");

                entity.Property(e => e.Tagname)
                    .HasColumnName("tagname")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<User>(entity =>
            {
                entity.ToTable("user");

                entity.Property(e => e.Userid).HasColumnName("userid");

                entity.Property(e => e.Dateofbirth)
                    .HasColumnName("dateofbirth")
                    .HasColumnType("datetime");

                entity.Property(e => e.Gender).HasColumnName("gender");

                entity.Property(e => e.Lastname)
                    .IsRequired()
                    .HasColumnName("lastname")
                    .HasMaxLength(50);

                entity.Property(e => e.Mailadress)
                    .IsRequired()
                    .HasColumnName("mailadress")
                    .HasMaxLength(50);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("name")
                    .HasMaxLength(50);

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasColumnName("password")
                    .HasMaxLength(200);

                entity.Property(e => e.Registeringdate)
                    .HasColumnName("registeringdate")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Username)
                    .IsRequired()
                    .HasColumnName("username")
                    .HasMaxLength(50);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}