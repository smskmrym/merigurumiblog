// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using Microsoft.EntityFrameworkCore;
using Microsoft.Data.SqlClient;
using System;
using System.Data;
using System.Threading.Tasks;
using merigurumiblog;

namespace merigurumiblog
{
    public partial class MerigurumiblogContextProcedures
    {
        private readonly MerigurumiblogContext _context;

        public MerigurumiblogContextProcedures(MerigurumiblogContext context)
        {
            _context = context;
        }

        public async Task<int> sp_alterdiagram(string diagramname, int? owner_id, int? version, byte[] definition, OutputParameter<int> returnValue = null)
        {
            var parameterdiagramname = new SqlParameter
            {
                ParameterName = "diagramname",
                Size = 256,
                Value = diagramname ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.NVarChar,
            };

            var parameterowner_id = new SqlParameter
            {
                ParameterName = "owner_id",
                Value = owner_id ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameterversion = new SqlParameter
            {
                ParameterName = "version",
                Value = version ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameterdefinition = new SqlParameter
            {
                ParameterName = "definition",
                Value = definition ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarBinary,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_alterdiagram] @diagramname, @owner_id, @version, @definition", parameterdiagramname, parameterowner_id, parameterversion, parameterdefinition, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_creatediagram(string diagramname, int? owner_id, int? version, byte[] definition, OutputParameter<int> returnValue = null)
        {
            var parameterdiagramname = new SqlParameter
            {
                ParameterName = "diagramname",
                Size = 256,
                Value = diagramname ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.NVarChar,
            };

            var parameterowner_id = new SqlParameter
            {
                ParameterName = "owner_id",
                Value = owner_id ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameterversion = new SqlParameter
            {
                ParameterName = "version",
                Value = version ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameterdefinition = new SqlParameter
            {
                ParameterName = "definition",
                Value = definition ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarBinary,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_creatediagram] @diagramname, @owner_id, @version, @definition", parameterdiagramname, parameterowner_id, parameterversion, parameterdefinition, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_dropdiagram(string diagramname, int? owner_id, OutputParameter<int> returnValue = null)
        {
            var parameterdiagramname = new SqlParameter
            {
                ParameterName = "diagramname",
                Size = 256,
                Value = diagramname ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.NVarChar,
            };

            var parameterowner_id = new SqlParameter
            {
                ParameterName = "owner_id",
                Value = owner_id ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_dropdiagram] @diagramname, @owner_id", parameterdiagramname, parameterowner_id, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_helpdiagramdefinition(string diagramname, int? owner_id, OutputParameter<int> returnValue = null)
        {
            var parameterdiagramname = new SqlParameter
            {
                ParameterName = "diagramname",
                Size = 256,
                Value = diagramname ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.NVarChar,
            };

            var parameterowner_id = new SqlParameter
            {
                ParameterName = "owner_id",
                Value = owner_id ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_helpdiagramdefinition] @diagramname, @owner_id", parameterdiagramname, parameterowner_id, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_helpdiagrams(string diagramname, int? owner_id, OutputParameter<int> returnValue = null)
        {
            var parameterdiagramname = new SqlParameter
            {
                ParameterName = "diagramname",
                Size = 256,
                Value = diagramname ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.NVarChar,
            };

            var parameterowner_id = new SqlParameter
            {
                ParameterName = "owner_id",
                Value = owner_id ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_helpdiagrams] @diagramname, @owner_id", parameterdiagramname, parameterowner_id, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_renamediagram(string diagramname, int? owner_id, string new_diagramname, OutputParameter<int> returnValue = null)
        {
            var parameterdiagramname = new SqlParameter
            {
                ParameterName = "diagramname",
                Size = 256,
                Value = diagramname ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.NVarChar,
            };

            var parameterowner_id = new SqlParameter
            {
                ParameterName = "owner_id",
                Value = owner_id ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameternew_diagramname = new SqlParameter
            {
                ParameterName = "new_diagramname",
                Size = 256,
                Value = new_diagramname ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.NVarChar,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_renamediagram] @diagramname, @owner_id, @new_diagramname", parameterdiagramname, parameterowner_id, parameternew_diagramname, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_upgraddiagrams(OutputParameter<int> returnValue = null)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_upgraddiagrams]", parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
